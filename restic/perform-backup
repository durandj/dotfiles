#!/usr/bin/env python3

import datetime
import os
import os.path
import subprocess
import sys

from typing import List


RESTIC_CONFIG_DIR = os.path.expanduser('~/.config/restic')
INCLUDE_FILE_CONFIG = os.path.join(RESTIC_CONFIG_DIR, 'files')
EXCLUDE_FILE_CONFIG = os.path.join(RESTIC_CONFIG_DIR, 'exclude')
IGNORE_FILE_BASE_NAME = '.restic-ignore'

def check_restic_settings() -> None:
    restic_repository = os.getenv('RESTIC_REPOSITORY')
    if restic_repository is None:
        print('RESTIC_REPOSITORY environment variable must be set')
        sys.exit(1)

    if not os.path.exists(INCLUDE_FILE_CONFIG):
        print(f'Configuration file for which files to backup must exist at: {INCLUDE_FILE_CONFIG}')
        sys.exit(1)

    if not os.path.exists(EXCLUDE_FILE_CONFIG):
        print(f'Configuration file for which files to exclude must exist at: {EXCLUDE_FILE_CONFIG}')
        sys.exit(1)


def normalize_path(path: str) -> str:
    return os.path.expanduser(
        os.path.expandvars(
            path.strip()
        )
    )


def get_include_files() -> List[str]:
    with open(INCLUDE_FILE_CONFIG, 'r') as config_file:
        return [
            normalize_path(include_file.strip())
            for include_file in config_file.readlines()
        ]


def parse_ignore_file(ignore_path: str) -> List[str]:
    base_dir = os.path.dirname(ignore_path)

    with open(ignore_path, 'r') as ignore_file:
        lines = map(lambda line: line.strip(), ignore_file.readlines())

    return [
        os.path.join(base_dir, line[1:]) if line.startswith('/') \
            else os.path.join(base_dir, '*', line)
        for line in lines
    ]


def get_exclude_patterns(included_files: List[str]) -> List[str]:
    exclude_patterns: List[str] = []

    for include_file in included_files:
        for path, _, files in os.walk(include_file):
            if IGNORE_FILE_BASE_NAME not in files:
                continue

            ignore_file_path = os.path.join(path, IGNORE_FILE_BASE_NAME)
            exclude_patterns.extend(parse_ignore_file(ignore_file_path))

    return exclude_patterns


def create_snapshot_tag() -> str:
    now = datetime.datetime.utcnow().replace(microsecond=0)

    return now.isoformat()


def main() -> None:
    check_restic_settings()

    include_files = get_include_files()
    exclude_patterns = get_exclude_patterns(include_files)

    snapshot_tag = create_snapshot_tag()

    command = [
        'restic', 'backup',
        '--verbose',
        '--tag', snapshot_tag,
        '--exclude-file', EXCLUDE_FILE_CONFIG,
    ]

    for exclude_pattern in exclude_patterns:
        command.extend(['--exclude', exclude_pattern])

    command.extend(include_files)

    subprocess.check_call(command)

if __name__ == '__main__':
    main()
